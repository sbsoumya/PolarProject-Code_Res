#--------------------------------------------
# Name:       capplotter.py
# Purpose:    plotter for capacity and achieved rate
#
# Author:      soumya
#
# Created:     19/08/2017
#----------------------------------------

import matplotlib.pyplot as plt
import json
import numpy as np
import problib as pl

#-------------------------------------------Capacity 
p=[0.04,0.15,0.2,0.25]
Cap=[pl.CapacityBSC(1,i) for i in p]
reln1=[0.570455,0.244918,0.165899,0.108582]
reln1LTPT=[0.597722,0.216538,0.130841,0.072411]

#~ #0.2
#~ r3=[0.02734375, 0.0546875, 0.0830078125, 0.1103515625, 0.138671875, 0.166015625, 0.1943359375, 0.2216796875, 0.25, 0.27734375]
#~ e3=[float("inf"), float("inf"), float("inf"), -2.886056647693163, -1.6575773191777938, -0.9867413347164835, -0.4487940562520938, -0.18889439298206961, -0.05070759858797432, -0.00718147993332044]
#~ #0.04
#~ r1=[0.0751953125, 0.1513671875, 0.2265625, 0.302734375, 0.3779296875, 0.4541015625, 0.5302734375, 0.60546875, 0.681640625, 0.7568359375]
#~ e1=[float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), -3.5228787452803374, -1.5044556624535514, -0.5705707356182124, -0.08788427092114617, -0.0012612837441822772]
#~ #0.15
#~ r2=[0.0380859375, 0.0771484375, 0.1162109375, 0.1552734375, 0.1943359375, 0.2333984375, 0.2724609375, 0.3115234375, 0.3505859375, 0.3896484375]
#~ e2=[float("inf"), float("inf"), float("inf"), -4.0, -2.1191864077192086, -1.1944991418415998, -0.5775743236287953, -0.21070138884055886, -0.04662694927330402, -0.0039263455147246756]
#~ #0.25
#~ r4=[0.0185546875, 0.037109375, 0.0556640625, 0.0751953125, 0.09375, 0.1123046875, 0.1318359375, 0.150390625, 0.1689453125, 0.1884765625]
#~ e4=[float("inf"), float("inf"), -4.0, -2.309803919971486, -1.469800301796918, -0.8579235389267152, -0.401100112936117, -0.18555262147751236, -0.06003170944866383, -0.01202108412451794]
#~ #----------------------------
#~ #0.2
#~ a3=[0.07031249999998743, 0.13694765624997643, 0.13333769531248768, 0.14180175781249074, 0.16254375000000532, 0.16621660156246945, 0.17002001953123919, 0.17198554687497855, 0.19129238281251879, 0.2360437500000312]
#~ ae3=[-3.3010299956639813, -0.7599502278873523, -0.8847224086040987, -0.272214825817094, -0.1993516446360119, -0.08841629901892423, -0.06288348923294615, -0.01399006814673879, -0.002045995930597039, -0.0019151120634443696]
#~ #0.04
#~ a1=[0.07031249999998743, 0.14062499999997485, 0.2226562499999607, 0.29296874999996964, 0.37500000000006006, 0.4453124999999214, 0.5273437499998724, 0.5975964843749434, 0.6772406250000327, 0.7260375000001107]
#~ ae1=[float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), float("inf"), -2.161150909262745, -0.9854794612420763, -0.14709324120304632, -0.031517051446064856]
#~ #0.15
#~ a2=[0.07031249999998743, 0.14062499999997485, 0.21833671874996463, 0.22744628906247896, 0.19683750000003075, 0.2215874999999609, 0.2540830078124453, 0.2615742187499732, 0.2597935546875008, 0.29204999999998343]
#~ ae2=[float("inf"), -2.9208187539523753, -0.9476909003526766, -0.47833898488792664, -0.8982529260536337, -0.5647928967592525, -0.20307892466983124, -0.16001944232165735, -0.2487979054116469, -0.15995666939650605]
#~ #0.25
#~ a4=[0.06921562499998792, 0.08343632812498741, 0.10488964843748128, 0.09949707031250928, 0.11111562500000455, 0.11368457031247926, 0.13253466796871846, 0.1503055664062357, 0.17589746093751077, 0.2254375000000402]
#~ ae4=[-1.1290111862394248, -0.5412111182891549, -0.22863302914221934, -0.24818221226312082, -0.07268097504034392, -0.0459022795208104, -0.00017375254558756316, 0.0, 0.0, 0.0]

plt.plot(p,Cap,label="Capacity")#
plt.plot(p,reln1,'g',label="Rate for 10^-1 FER")
plt.plot(p,reln1LTPT,'r',label="with LTPT")
plt.legend(loc="best")
plt.xlabel('flip p')
plt.ylabel('Rate')
plt.title("Polar code Rate vs p for N=1024")
plt.grid(True)
plt.show()

#to be automated

#~ filename1="./simresults/polarchannel_FERvsR_derate1024_0.04_17-11-02_17-21-53.txt"
#~ filename3="./simresults/polarchannel_FERvsR_derate_rateless_LTPT1024_0.04_17-11-07_10-10-56.txt"



#~ table = []
#~ with open(filename1,'r') as f:
    #~ for line in f:
        #~ table.append(json.loads(line))

#~ #for row in table:
#~ #	print(row)


#~ table2 = []
#~ with open(filename2,'r') as f:
    #~ for line in f:
        #~ table2.append(json.loads(line))
        
#~ table3 = []
#~ with open(filename3,'r') as f:
    #~ for line in f:
        #~ table3.append(json.loads(line))


#~ plt.subplot(2,1,1)
#~ plt.semilogy(table[7],[10**i for i in table[8]],'r',label="Channel_p=design_p")
#~ #plt.semilogy(table2[8],[10**i for i in table2[9]],'b',label="channel_p>design_p = 0.04")
#~ plt.semilogy(table3[10],[10**i for i in table3[12]],'g',label="Rateless LTPT")
#~ plt.xlabel('sent Rate')
#~ plt.ylabel('Frame Error rate.')
#~ plt.title('FER vs Rate Rateless LTPT design \nN=1024,Capacity='+str()+",channel_p="+str("0.04"))
#~ plt.legend(loc="best")
#~ plt.grid(True)

#~ plt.figtext(0.005, 0.03, "Compound Channel=[0.04,0.15,0.2,0.25]\n"+filename1+"\n"+filename3)

#~ plt.subplot(2,1,2)
#~ print table3[10]
#~ print table3[11]
#~ plt.plot(table3[10],table3[11])
#~ plt.title("Sent rate vs achieved rate")
#~ plt.xlabel('Sent Rate')
#~ plt.ylabel('Achieved Rate')
#~ plt.grid(True)


plt.show()

#------------------------------------------------------------------	
